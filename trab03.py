# -*- coding: utf-8 -*-
"""Trab03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hVMeBmUMfPjoxHX-MQd4DU-8suC24G4d
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd  
import seaborn as sns  
import matplotlib.pyplot as plt  
# %matplotlib inline   
estrelas = pd.read_csv('Estrelas.csv')

estrelas.head()

estrelas = estrelas.rename(columns={'Temperature (K)': 'Temperature(K)', 'Absolute magnitude(Mv)': 'Absolute_magnitude(Mv)', 'Star type': 'Star_Type', 'Star color': 'Star_color', 'Spectral Class': 'Spectral_Class'})

"""**VERIFICANDO CLASSIFICADORES**"""

estrelas.Star_color.unique()

estrelas.Spectral_Class.unique()

estrelas.Star_Type.unique()

"""** **"""

sns.pairplot(estrelas, hue = 'Star_Type')

#Feature Matrix
X_estrelas = estrelas.loc[: ,  ["Temperature(K)",	"Luminosity(L/Lo)", "Radius(R/Ro)",	"Absolute_magnitude(Mv)"] ]
X_estrelas.head()

#Target
y_estrelas = estrelas.Star_Type
y_estrelas.head()

#Separação do Banco de Dados
from sklearn.model_selection import train_test_split  
Xtreino, Xteste, ytreino, yteste = train_test_split(X_estrelas, y_estrelas, random_state=2020)

"""**NAIVE BAYES**"""

from sklearn.naive_bayes import GaussianNB # 1. Escolha do modelo.
model_bayes = GaussianNB()  #2. Escolha  dos hiperparâmetros e intanciação.
model_bayes.fit(Xtreino, ytreino) #4. Ajuste o modelo aos dados.
y_model_bayes = model_bayes.predict(Xteste) #5 Faça predições em dados novos

y_model_bayes

from sklearn.metrics import accuracy_score
accuracy_score(yteste, y_model_bayes)

"""MATRIZ DE CONFUSÃO -BAYES"""

from sklearn.metrics import confusion_matrix

mat_bayes = confusion_matrix(yteste, y_model_bayes)

sns.heatmap(mat_bayes, square=True, annot = True)

plt.xlabel('Valores Preditos')
plt.ylabel('Valores Reais')

"""**DECISION TREE**"""

from sklearn.tree import DecisionTreeClassifier  # 1. Importação

model_decisiont = DecisionTreeClassifier()       # 2. Hiperparâmetros                                                    
model_decisiont.fit(Xtreino, ytreino)            #4. Ajuste o modelo aos dados.
y_model_decisiont = model_decisiont.predict(Xteste) #5. Faça predições em dados novos

y_model_decisiont

accuracy_score(yteste, y_model_decisiont)

"""MATRIZ DE CONFUSÃO - DECISION"""

mat_decisiont = confusion_matrix(yteste, y_model_decisiont)

sns.heatmap(mat_decisiont, square=True, annot = True)
plt.xlabel('Valores Preditos')
plt.ylabel('Valores Reais')

"""**REDES NEURAIS**"""

from sklearn.neural_network import MLPClassifier # 1. Importação

model_neural = MLPClassifier()                  #2. Hiperparâmetros
model_neural.fit(Xtreino, ytreino)              #4. Ajuste o modelo aos dados.
y_model_neural = model_neural.predict(Xteste)   #5. Faça predições em dados novos
accuracy_score(yteste, y_model_neural)

"""MATRIZ DEE CONFUSÃO - NEURAL"""

mat_neural = confusion_matrix(yteste, y_model_neural)
sns.heatmap(mat_neural, square=True, annot = True)
plt.xlabel('Valores Preditos')
plt.ylabel('Valores Reais')